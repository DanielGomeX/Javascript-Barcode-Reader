{"version":3,"file":"javascript-barcode-reader.min.js.map","sources":["../src/utiltities.js","../src/code-128/index.js","../src/2of5/index.js","../src/code-39/index.js","../src/code-93/index.js","../src/ean-13/index.js","../src/ean-8/index.js","../src/codabar/index.js","../src/index.js"],"sourcesContent":["const Jimp = require('jimp')\r\n\r\nconst isNode =\r\n  typeof process === 'object' &&\r\n  process.release &&\r\n  process.release.name === 'node'\r\n\r\n// check if string is url\r\nfunction isUrl(s) {\r\n  const regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/\r\n  return !s[0] === '#' || regexp.test(s)\r\n}\r\n\r\n/**\r\n * Creates image data from HTML image\r\n * @param {HTMLImageElement} image HTML Image element\r\n */\r\nfunction createImageData(image) {\r\n  const canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n  const width = image.naturalWidth\r\n  const height = image.naturalHeight\r\n\r\n  canvas.width = width\r\n  canvas.height = height\r\n\r\n  ctx.drawImage(image, 0, 0)\r\n\r\n  return ctx.getImageData(0, 0, image.naturalWidth, image.naturalHeight)\r\n}\r\n\r\n/**\r\n * Reads image source and returns imageData as only callback parameter\r\n * @param {*} source Image source\r\n * @param {Function} callback Callback to pass the imageData\r\n */\r\nasync function getImageDataFromSource(source) {\r\n  const isStringSource = typeof source === 'string'\r\n  const isURLSource = isStringSource ? isUrl(source) : false\r\n  const { tagName } = source\r\n\r\n  return new Promise((resolve, reject) => {\r\n    // String source\r\n    if (isStringSource) {\r\n      // Read file in Node.js\r\n      if (isNode) {\r\n        Jimp.read(\r\n          isURLSource ? { url: source, headers: {} } : source,\r\n          (err, image) => {\r\n            if (err) {\r\n              reject(err)\r\n            } else {\r\n              const { data, width, height } = image.bitmap\r\n              resolve({\r\n                data: data.toJSON().data,\r\n                width,\r\n                height,\r\n              })\r\n            }\r\n          }\r\n        )\r\n      } else if (isURLSource) {\r\n        // Load Image from source\r\n        const img = new Image()\r\n        img.onerror = reject\r\n        img.onload = () => resolve(createImageData(img))\r\n        img.src = source\r\n      } else {\r\n        // Find Elment by ID\r\n        const imgElem = document.getElementById(source)\r\n        if (imgElem) {\r\n          resolve(createImageData(imgElem))\r\n        }\r\n\r\n        reject(new Error('Invalid image source specified!'))\r\n      }\r\n    } else if (tagName) {\r\n      // HTML Image element\r\n      if (tagName === 'IMG') {\r\n        resolve(createImageData(source))\r\n      }\r\n      // HTML Canvas element\r\n      else if (tagName === 'CANVAS') {\r\n        resolve(\r\n          source\r\n            .getContext('2d')\r\n            .getImageData(0, 0, source.naturalWidth, source.naturalHeight)\r\n        )\r\n      }\r\n\r\n      reject(new Error('Invalid image source specified!'))\r\n    }\r\n    // Pixel Data\r\n    else if (source.data && source.width && source.height) {\r\n      resolve(source)\r\n    } else {\r\n      reject(new Error('Invalid image source specified!'))\r\n    }\r\n  })\r\n}\r\n\r\nfunction getLines(obj) {\r\n  const { data, start, end, channels, width } = obj\r\n  const pxLine = data.slice(start, end)\r\n  const sum = []\r\n  const bmp = []\r\n  const lines = []\r\n  let count = 1\r\n  let min = 0\r\n  let max = 0\r\n\r\n  const padding = { left: true, right: true }\r\n\r\n  // grey scale section and sum of columns pixels in section\r\n  for (let row = 0; row < 2; row += 1) {\r\n    for (let col = 0; col < width; col += 1) {\r\n      const i = (row * width + col) * channels\r\n      const g = (pxLine[i] * 3 + pxLine[i + 1] * 4 + pxLine[i + 2] * 2) / 9\r\n      const s = sum[col]\r\n\r\n      pxLine[i] = g\r\n      pxLine[i + 1] = g\r\n      pxLine[i + 2] = g\r\n\r\n      sum[col] = g + (s || 0)\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < width; i += 1) {\r\n    sum[i] /= 2\r\n    const s = sum[i]\r\n\r\n    if (s < min) {\r\n      min = s\r\n    } else {\r\n      max = s\r\n    }\r\n  }\r\n\r\n  // matches columns in two rows\r\n  const pivot = min + (max - min) / 2\r\n\r\n  for (let col = 0; col < width; col += 1) {\r\n    let matches = 0\r\n    let value\r\n\r\n    for (let row = 0; row < 2; row += 1) {\r\n      value = pxLine[(row * width + col) * channels]\r\n\r\n      if (value > pivot) {\r\n        matches += 1\r\n      }\r\n    }\r\n\r\n    if (col === 0 && value <= pivot) padding.left = false\r\n    if (col === width - 1 && value <= pivot) {\r\n      padding.right = false\r\n    }\r\n\r\n    bmp.push(matches > 1)\r\n  }\r\n\r\n  // matches width of barcode lines\r\n  let curr = bmp[0]\r\n\r\n  for (let col = 0; col < width; col += 1) {\r\n    if (bmp[col] === curr) {\r\n      count += 1\r\n\r\n      if (col === width - 1) {\r\n        lines.push(count)\r\n      }\r\n    } else {\r\n      lines.push(count)\r\n      count = 1\r\n      curr = bmp[col]\r\n    }\r\n  }\r\n\r\n  return { lines, padding }\r\n}\r\n\r\nmodule.exports = {\r\n  getImageDataFromSource,\r\n  getLines,\r\n}\r\n","const WIDTH_TBL = [\r\n  '212222',\r\n  '222122',\r\n  '222221',\r\n  '121223',\r\n  '121322',\r\n  '131222',\r\n  '122213',\r\n  '122312',\r\n  '132212',\r\n  '221213',\r\n  '221312',\r\n  '231212',\r\n  '112232',\r\n  '122132',\r\n  '122231',\r\n  '113222',\r\n  '123122',\r\n  '123221',\r\n  '223211',\r\n  '221132',\r\n  '221231',\r\n  '213212',\r\n  '223112',\r\n  '312131',\r\n  '311222',\r\n  '321122',\r\n  '321221',\r\n  '312212',\r\n  '322112',\r\n  '322211',\r\n  '212123',\r\n  '212321',\r\n  '232121',\r\n  '111323',\r\n  '131123',\r\n  '131321',\r\n  '112313',\r\n  '132113',\r\n  '132311',\r\n  '211313',\r\n  '231113',\r\n  '231311',\r\n  '112133',\r\n  '112331',\r\n  '132131',\r\n  '113123',\r\n  '113321',\r\n  '133121',\r\n  '313121',\r\n  '211331',\r\n  '231131',\r\n  '213113',\r\n  '213311',\r\n  '213131',\r\n  '311123',\r\n  '311321',\r\n  '331121',\r\n  '312113',\r\n  '312311',\r\n  '332111',\r\n  '314111',\r\n  '221411',\r\n  '431111',\r\n  '111224',\r\n  '111422',\r\n  '121124',\r\n  '121421',\r\n  '141122',\r\n  '141221',\r\n  '112214',\r\n  '112412',\r\n  '122114',\r\n  '122411',\r\n  '142112',\r\n  '142211',\r\n  '241211',\r\n  '221114',\r\n  '413111',\r\n  '241112',\r\n  '134111',\r\n  '111242',\r\n  '121142',\r\n  '121241',\r\n  '114212',\r\n  '124112',\r\n  '124211',\r\n  '411212',\r\n  '421112',\r\n  '421211',\r\n  '212141',\r\n  '214121',\r\n  '412121',\r\n  '111143',\r\n  '111341',\r\n  '131141',\r\n  '114113',\r\n  '114311',\r\n  '411113',\r\n  '411311',\r\n  '113141',\r\n  '114131',\r\n  '311141',\r\n  '411131',\r\n  '211412',\r\n  '211214',\r\n  '211232',\r\n  '233111',\r\n  '211133',\r\n  '2331112',\r\n]\r\n\r\nconst TBL_A = [\r\n  ' ',\r\n  '!',\r\n  '\"',\r\n  '#',\r\n  '$',\r\n  '%',\r\n  '&',\r\n  \"'\",\r\n  '(',\r\n  ')',\r\n  '*',\r\n  '+',\r\n  ',',\r\n  '-',\r\n  '.',\r\n  '/',\r\n  '0',\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  ':',\r\n  ';',\r\n  '<',\r\n  '=',\r\n  '>',\r\n  '?',\r\n  '@',\r\n  'A',\r\n  'B',\r\n  'C',\r\n  'D',\r\n  'E',\r\n  'F',\r\n  'G',\r\n  'H',\r\n  'I',\r\n  'J',\r\n  'K',\r\n  'L',\r\n  'M',\r\n  'N',\r\n  'O',\r\n  'P',\r\n  'Q',\r\n  'R',\r\n  'S',\r\n  'T',\r\n  'U',\r\n  'V',\r\n  'W',\r\n  'X',\r\n  'Y',\r\n  'Z',\r\n  '[',\r\n  '\\\\',\r\n  ']',\r\n  '^',\r\n  '_',\r\n  'NUL',\r\n  'SOH',\r\n  'STX',\r\n  'ETX',\r\n  'EOT',\r\n  'ENQ',\r\n  'ACK',\r\n  'BEL',\r\n  'BS',\r\n  'HT',\r\n  'LF',\r\n  'VT',\r\n  'FF',\r\n  'CR',\r\n  'SO',\r\n  'SI',\r\n  'DLE',\r\n  'DC1',\r\n  'DC2',\r\n  'DC3',\r\n  'DC4',\r\n  'NAK',\r\n  'SYN',\r\n  'ETB',\r\n  'CAN',\r\n  'EM',\r\n  'SUB',\r\n  'ESC',\r\n  'FS',\r\n  'GS',\r\n  'RS',\r\n  'US',\r\n  'FNC 3',\r\n  'FNC 2',\r\n  'Shift B',\r\n  'Code C',\r\n  'Code B',\r\n  'FNC 4',\r\n  'FNC 1',\r\n]\r\n\r\nconst TBL_B = [\r\n  ' ',\r\n  '!',\r\n  '\"',\r\n  '#',\r\n  '$',\r\n  '%',\r\n  '&',\r\n  \"'\",\r\n  '(',\r\n  ')',\r\n  '*',\r\n  '+',\r\n  ',',\r\n  '-',\r\n  '.',\r\n  '/',\r\n  '0',\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  ':',\r\n  ';',\r\n  '<',\r\n  '=',\r\n  '>',\r\n  '?',\r\n  '@',\r\n  'A',\r\n  'B',\r\n  'C',\r\n  'D',\r\n  'E',\r\n  'F',\r\n  'G',\r\n  'H',\r\n  'I',\r\n  'J',\r\n  'K',\r\n  'L',\r\n  'M',\r\n  'N',\r\n  'O',\r\n  'P',\r\n  'Q',\r\n  'R',\r\n  'S',\r\n  'T',\r\n  'U',\r\n  'V',\r\n  'W',\r\n  'X',\r\n  'Y',\r\n  'Z',\r\n  '[',\r\n  '\\\\',\r\n  ']',\r\n  '^',\r\n  '_',\r\n  '`',\r\n  'a',\r\n  'b',\r\n  'c',\r\n  'd',\r\n  'e',\r\n  'f',\r\n  'g',\r\n  'h',\r\n  'i',\r\n  'j',\r\n  'k',\r\n  'l',\r\n  'm',\r\n  'n',\r\n  'o',\r\n  'p',\r\n  'q',\r\n  'r',\r\n  's',\r\n  't',\r\n  'u',\r\n  'v',\r\n  'w',\r\n  'x',\r\n  'y',\r\n  'z',\r\n  '{',\r\n  '|',\r\n  '}',\r\n  '~',\r\n  'DEL',\r\n  'FNC 3',\r\n  'FNC 2',\r\n  'Shift A',\r\n  'Code C',\r\n  'FNC 4',\r\n  'Code A',\r\n  'FNC 1',\r\n]\r\n\r\nconst TBL_C = [\r\n  '00',\r\n  '01',\r\n  '02',\r\n  '03',\r\n  '04',\r\n  '05',\r\n  '06',\r\n  '07',\r\n  '08',\r\n  '09',\r\n  '10',\r\n  '11',\r\n  '12',\r\n  '13',\r\n  '14',\r\n  '15',\r\n  '16',\r\n  '17',\r\n  '18',\r\n  '19',\r\n  '20',\r\n  '21',\r\n  '22',\r\n  '23',\r\n  '24',\r\n  '25',\r\n  '26',\r\n  '27',\r\n  '28',\r\n  '29',\r\n  '30',\r\n  '31',\r\n  '32',\r\n  '33',\r\n  '34',\r\n  '35',\r\n  '36',\r\n  '37',\r\n  '38',\r\n  '39',\r\n  '40',\r\n  '41',\r\n  '42',\r\n  '43',\r\n  '44',\r\n  '45',\r\n  '46',\r\n  '47',\r\n  '48',\r\n  '49',\r\n  '50',\r\n  '51',\r\n  '52',\r\n  '53',\r\n  '54',\r\n  '55',\r\n  '56',\r\n  '57',\r\n  '58',\r\n  '59',\r\n  '60',\r\n  '61',\r\n  '62',\r\n  '63',\r\n  '64',\r\n  '65',\r\n  '66',\r\n  '67',\r\n  '68',\r\n  '69',\r\n  '70',\r\n  '71',\r\n  '72',\r\n  '73',\r\n  '74',\r\n  '75',\r\n  '76',\r\n  '77',\r\n  '78',\r\n  '79',\r\n  '80',\r\n  '81',\r\n  '82',\r\n  '83',\r\n  '84',\r\n  '85',\r\n  '86',\r\n  '87',\r\n  '88',\r\n  '89',\r\n  '90',\r\n  '91',\r\n  '92',\r\n  '93',\r\n  '94',\r\n  '95',\r\n  '96',\r\n  '97',\r\n  '98',\r\n  '99',\r\n  'Code B',\r\n  'Code A',\r\n  'FNC 1',\r\n]\r\n\r\nconst computeGroup = lines => {\r\n  // sum of a group in code-128 must be 11\r\n  const factor = lines.reduce((pre, item) => pre + item, 0) / 11;\r\n  //\r\n  return lines.map(item => Math.round(item/factor)).join('');\r\n}\r\n\r\nmodule.exports = lines => {\r\n  let lookupTBL; let sumOP; let letterKey; let letterCode; let keyIndex\r\n  const code = []\r\n\r\n  // extract terminal bar\r\n  lines.pop()\r\n\r\n  const seq = lines.slice(0);\r\n\r\n  letterKey = computeGroup(seq.splice(0, 6))\r\n\r\n  switch (letterKey) {\r\n    case '211214':\r\n      lookupTBL = TBL_B\r\n      sumOP = 104\r\n      break\r\n    case '211232':\r\n      lookupTBL = TBL_C\r\n      sumOP = 105\r\n      break\r\n    default:\r\n      lookupTBL = TBL_A\r\n      sumOP = 103\r\n      break\r\n  }\r\n\r\n  for (let i = 1; seq.length > 12; i += 1) {\r\n    letterKey = computeGroup(seq.splice(0, 6))\r\n    keyIndex = WIDTH_TBL.indexOf(letterKey)\r\n    sumOP += i * keyIndex\r\n    letterCode = lookupTBL[keyIndex]\r\n\r\n    switch (letterCode) {\r\n      case 'Code A':\r\n        lookupTBL = TBL_A\r\n        break\r\n      case 'Code B':\r\n        lookupTBL = TBL_B\r\n        break\r\n      case 'Code C':\r\n        lookupTBL = TBL_C\r\n        break\r\n      default:\r\n        code.push(letterCode)\r\n        break\r\n    }\r\n  }\r\n\r\n  letterKey = computeGroup(seq.splice(0, 6))\r\n\r\n  if (sumOP % 103 !== WIDTH_TBL.indexOf(letterKey)) return null\r\n\r\n  return code.join('')\r\n}\r\n","const CHAR_SET = [\r\n  'nnwwn',\r\n  'wnnnw',\r\n  'nwnnw',\r\n  'wwnnn',\r\n  'nnwnw',\r\n  'wnwnn',\r\n  'nwwnn',\r\n  'nnnww',\r\n  'wnnwn',\r\n  'nwnwn',\r\n]\r\n\r\nmodule.exports = (lines, type = 'standard') => {\r\n  const code = []\r\n\r\n  const barThreshold = Math.ceil(\r\n    lines.reduce((pre, item) => (pre + item) / 2, 0)\r\n  )\r\n\r\n  if (type === 'interleaved') {\r\n    // extract start/ends pair\r\n    const startChar = lines\r\n      .splice(0, 4)\r\n      .map(line => (line > barThreshold ? 'w' : 'n'))\r\n      .join('')\r\n\r\n    const endChar = lines\r\n      .splice(lines.length - 3, 3)\r\n      .map(line => (line > barThreshold ? 'w' : 'n'))\r\n      .join('')\r\n\r\n    if (startChar !== 'nnnn' || endChar !== 'wnn') return null\r\n\r\n    // Read one encoded character at a time.\r\n    while (lines.length > 0) {\r\n      const seg = lines.splice(0, 10)\r\n\r\n      const a = seg\r\n        .filter((item, index) => index % 2 === 0)\r\n        .map(line => (line > barThreshold ? 'w' : 'n'))\r\n        .join('')\r\n\r\n      code.push(CHAR_SET.indexOf(a))\r\n\r\n      const b = seg\r\n        .filter((item, index) => index % 2 !== 0)\r\n        .map(line => (line > barThreshold ? 'w' : 'n'))\r\n        .join('')\r\n\r\n      code.push(CHAR_SET.indexOf(b))\r\n    }\r\n  } else if (type === 'standard') {\r\n    // extract start/ends pair\r\n    const startChar = lines\r\n      .splice(0, 6)\r\n      .filter((item, index) => index % 2 === 0)\r\n      .map(line => (line > barThreshold ? 'w' : 'n'))\r\n      .join('')\r\n\r\n    const endChar = lines\r\n      .splice(lines.length - 5, 5)\r\n      .filter((item, index) => index % 2 === 0)\r\n      .map(line => (line > barThreshold ? 'w' : 'n'))\r\n      .join('')\r\n\r\n    if (startChar !== 'wwn' || endChar !== 'wnw') return null\r\n\r\n    // Read one encoded character at a time.\r\n    while (lines.length > 0) {\r\n      const a = lines\r\n        .splice(0, 10)\r\n        .filter((item, index) => index % 2 === 0)\r\n        .map(line => (line > barThreshold ? 'w' : 'n'))\r\n        .join('')\r\n\r\n      code.push(CHAR_SET.indexOf(a))\r\n    }\r\n  }\r\n\r\n  return code.join('')\r\n}\r\n","const CHAR_SET = {\r\n  nnnwwnwnn: '0',\r\n  wnnwnnnnw: '1',\r\n  nnwwnnnnw: '2',\r\n  wnwwnnnnn: '3',\r\n  nnnwwnnnw: '4',\r\n  wnnwwnnnn: '5',\r\n  nnwwwnnnn: '6',\r\n  nnnwnnwnw: '7',\r\n  wnnwnnwnn: '8',\r\n  nnwwnnwnn: '9',\r\n  wnnnnwnnw: 'A',\r\n  nnwnnwnnw: 'B',\r\n  wnwnnwnnn: 'C',\r\n  nnnnwwnnw: 'D',\r\n  wnnnwwnnn: 'E',\r\n  nnwnwwnnn: 'F',\r\n  nnnnnwwnw: 'G',\r\n  wnnnnwwnn: 'H',\r\n  nnwnnwwnn: 'I',\r\n  nnnnwwwnn: 'J',\r\n  wnnnnnnww: 'K',\r\n  nnwnnnnww: 'L',\r\n  wnwnnnnwn: 'M',\r\n  nnnnwnnww: 'N',\r\n  wnnnwnnwn: 'O',\r\n  nnwnwnnwn: 'P',\r\n  nnnnnnwww: 'Q',\r\n  wnnnnnwwn: 'R',\r\n  nnwnnnwwn: 'S',\r\n  nnnnwnwwn: 'T',\r\n  wwnnnnnnw: 'U',\r\n  nwwnnnnnw: 'V',\r\n  wwwnnnnnn: 'W',\r\n  nwnnwnnnw: 'X',\r\n  wwnnwnnnn: 'Y',\r\n  nwwnwnnnn: 'Z',\r\n  nwnnnnwnw: '-',\r\n  wwnnnnwnn: '.',\r\n  nwwnnnwnn: ' ',\r\n  nwnwnwnnn: '$',\r\n  nwnwnnnwn: '/',\r\n  nwnnnwnwn: '+',\r\n  nnnwnwnwn: '%',\r\n  nwnnwnwnn: '*',\r\n}\r\n\r\nmodule.exports = lines => {\r\n  const code = []\r\n\r\n  const barThreshold = Math.ceil(\r\n    lines.reduce((pre, item) => pre + item, 0) / lines.length\r\n  )\r\n\r\n  // Read one encoded character at a time.\r\n  while (lines.length > 0) {\r\n    const sequenceBar = lines\r\n      .splice(0, 10)\r\n      .map(line => (line > barThreshold ? 'w' : 'n'))\r\n\r\n    code.push(CHAR_SET[sequenceBar.slice(0, 9).join('')])\r\n  }\r\n\r\n  if (code.pop() !== '*' || code.shift() !== '*') return null\r\n\r\n  return code.join('')\r\n}\r\n","const CHAR_SET = [\r\n  { '100010100': '0' },\r\n  { '101001000': '1' },\r\n  { '101000100': '2' },\r\n  { '101000010': '3' },\r\n  { '100101000': '4' },\r\n  { '100100100': '5' },\r\n  { '100100010': '6' },\r\n  { '101010000': '7' },\r\n  { '100010010': '8' },\r\n  { '100001010': '9' },\r\n  { '110101000': 'A' },\r\n  { '110100100': 'B' },\r\n  { '110100010': 'C' },\r\n  { '110010100': 'D' },\r\n  { '110010010': 'E' },\r\n  { '110001010': 'F' },\r\n  { '101101000': 'G' },\r\n  { '101100100': 'H' },\r\n  { '101100010': 'I' },\r\n  { '100110100': 'J' },\r\n  { '100011010': 'K' },\r\n  { '101011000': 'L' },\r\n  { '101001100': 'M' },\r\n  { '101000110': 'N' },\r\n  { '100101100': 'O' },\r\n  { '100010110': 'P' },\r\n  { '110110100': 'Q' },\r\n  { '110110010': 'R' },\r\n  { '110101100': 'S' },\r\n  { '110100110': 'T' },\r\n  { '110010110': 'U' },\r\n  { '110011010': 'V' },\r\n  { '101101100': 'W' },\r\n  { '101100110': 'X' },\r\n  { '100110110': 'Y' },\r\n  { '100111010': 'Z' },\r\n  { '100101110': '-' },\r\n  { '111010100': '.' },\r\n  { '111010010': ' ' },\r\n  { '111001010': '$' },\r\n  { '101101110': '/' },\r\n  { '101110110': '+' },\r\n  { '110101110': '%' },\r\n  { '100100110': '($)' },\r\n  { '111011010': '(%)' },\r\n  { '111010110': '(/)' },\r\n  { '100110010': '(+)' },\r\n  { '101011110': '*' },\r\n]\r\n\r\nmodule.exports = lines => {\r\n  const code = []\r\n  const binary = []\r\n\r\n  // remove termination bar\r\n  lines.pop()\r\n\r\n  const barThreshold = Math.ceil(\r\n    lines.reduce((pre, item) => pre + item, 0) / lines.length\r\n  )\r\n\r\n  const minBarWidth = Math.ceil(\r\n    lines.reduce((pre, item) => {\r\n      if (item < barThreshold) return (pre + item) / 2\r\n      return pre\r\n    }, 0)\r\n  )\r\n\r\n  // leave the padded *\r\n  for (let i = 0; i < lines.length; i += 1) {\r\n    let segment = lines[i]\r\n\r\n    while (segment > 0) {\r\n      if (i % 2 === 0) {\r\n        binary.push(1)\r\n      } else {\r\n        binary.push(0)\r\n      }\r\n      segment -= minBarWidth\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < binary.length; i += 9) {\r\n    const searcKey = binary.slice(i, i + 9).join('')\r\n\r\n    const char = CHAR_SET.filter(item => Object.keys(item)[0] === searcKey)\r\n\r\n    code.push(char[0][searcKey])\r\n  }\r\n\r\n  if (code.shift() !== '*' || code.pop() !== '*') return null\r\n\r\n  const K = code.pop()\r\n  let sum = 0\r\n  let letter; let Value\r\n  const findValue = item => Object.values(item)[0] === letter\r\n\r\n  for (let i = code.length - 1; i >= 0; i -= 1) {\r\n    letter = code[i]\r\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0])\r\n    sum += Value * (1 + ((code.length - (i + 1)) % 20))\r\n  }\r\n\r\n  if (Object.values(CHAR_SET[sum % 47])[0] !== K) return null\r\n\r\n  const C = code.pop()\r\n  sum = 0\r\n\r\n  for (let i = code.length - 1; i >= 0; i -= 1) {\r\n    letter = code[i]\r\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0])\r\n    sum += Value * (1 + ((code.length - (i + 1)) % 20))\r\n  }\r\n\r\n  if (Object.values(CHAR_SET[sum % 47])[0] !== C) return null\r\n\r\n  return code.join('')\r\n}\r\n","const UPC_SET = {\r\n  '3211': '0',\r\n  '2221': '1',\r\n  '2122': '2',\r\n  '1411': '3',\r\n  '1132': '4',\r\n  '1231': '5',\r\n  '1114': '6',\r\n  '1312': '7',\r\n  '1213': '8',\r\n  '3112': '9',\r\n}\r\n\r\nmodule.exports = lines => {\r\n  let code = ''\r\n  // manually add start dummy line\r\n  lines.unshift(0)\r\n  // start indicator/reference lines\r\n  const bar = ~~((lines[1] + lines[2] + lines[3]) / 3) //eslint-disable-line\r\n\r\n  for (let i = 1; i < lines.length; i += 1) {\r\n    let group\r\n\r\n    if (code.length < 6) {\r\n      group = lines.slice(i * 4, i * 4 + 4)\r\n    } else {\r\n      group = lines.slice(i * 4 + 5, i * 4 + 9)\r\n    }\r\n\r\n    const digits = [\r\n      Math.round(group[0] / bar),\r\n      Math.round(group[1] / bar),\r\n      Math.round(group[2] / bar),\r\n      Math.round(group[3] / bar),\r\n    ]\r\n\r\n    const result =\r\n      UPC_SET[digits.join('')] || UPC_SET[digits.reverse().join('')]\r\n\r\n    if (result) {\r\n      code += result\r\n    }\r\n\r\n    if (code.length === 12) break\r\n  }\r\n\r\n  return code\r\n}\r\n","const UPC_SET = {\r\n  '3211': '0',\r\n  '2221': '1',\r\n  '2122': '2',\r\n  '1411': '3',\r\n  '1132': '4',\r\n  '1231': '5',\r\n  '1114': '6',\r\n  '1312': '7',\r\n  '1213': '8',\r\n  '3112': '9',\r\n}\r\n\r\nmodule.exports = lines => {\r\n  let code = ''\r\n  // manually add start dummy line\r\n  lines.unshift(0)\r\n  // start indicator/reference lines\r\n  const bar = ~~((lines[1] + lines[2] + lines[3]) / 3) //eslint-disable-line\r\n\r\n  for (let i = 1; i < lines.length; i += 1) {\r\n    let group\r\n\r\n    if (code.length < 4) {\r\n      group = lines.slice(i * 4, i * 4 + 4)\r\n    } else {\r\n      group = lines.slice(i * 4 + 5, i * 4 + 9)\r\n    }\r\n\r\n    const digits = [\r\n      Math.round(group[0] / bar),\r\n      Math.round(group[1] / bar),\r\n      Math.round(group[2] / bar),\r\n      Math.round(group[3] / bar),\r\n    ]\r\n\r\n    const result =\r\n      UPC_SET[digits.join('')] || UPC_SET[digits.reverse().join('')]\r\n\r\n    if (result) {\r\n      code += result\r\n    }\r\n\r\n    if (code.length === 8) break\r\n  }\r\n\r\n  return code\r\n}\r\n","const CHAR_SET = {\r\n  nnnnnww: '0',\r\n  nnnnwwn: '1',\r\n  nnnwnnw: '2',\r\n  wwnnnnn: '3',\r\n  nnwnnwn: '4',\r\n  wnnnnwn: '5',\r\n  nwnnnnw: '6',\r\n  nwnnwnn: '7',\r\n  nwwnnnn: '8',\r\n  wnnwnnn: '9',\r\n  nnnwwnn: '-',\r\n  nnwwnnn: '$',\r\n  wnnnwnw: ':',\r\n  wnwnnnw: '/',\r\n  wnwnwnn: '.',\r\n  nnwwwww: '+',\r\n  nnwwnwn: 'A',\r\n  nnnwnww: 'B',\r\n  nwnwnnw: 'C',\r\n  nnnwwwn: 'D',\r\n}\r\n\r\nmodule.exports = lines => {\r\n  const code = []\r\n\r\n  const barThreshold = Math.ceil(\r\n    lines.reduce((pre, item) => (pre + item) / 2, 0)\r\n  )\r\n\r\n  // Read one encoded character at a time.\r\n  while (lines.length > 0) {\r\n    const seg = lines.splice(0, 8).splice(0, 7)\r\n\r\n    const a = seg.map(line => (line < barThreshold ? 'n' : 'w')).join('')\r\n\r\n    code.push(CHAR_SET[a])\r\n  }\r\n\r\n  return code.join('')\r\n}\r\n","const UTILITIES = require('./utiltities')\r\n\r\n/* eslint-disable */\r\nconst BARCODE_DECODERS = {\r\n  'code-128': require('./code-128'),\r\n  'code-2of5': require('./2of5'),\r\n  'code-39': require('./code-39'),\r\n  'code-93': require('./code-93'),\r\n  'ean-13': require('./ean-13'),\r\n  'ean-8': require('./ean-8'),\r\n  codabar: require('./codabar'),\r\n}\r\n/* eslint-enable */\r\n\r\n/**\r\n * Scans and returns barcode from the provided image\r\n *\r\n * @param {*} image Image element || Canvas || ImageData || Image Path in Node.js\r\n * @param {Object} options Options defining type of barcode to detect\r\n * @param {String} options.barcode Barcode name\r\n * @param {String=} options.type Type of Barcode\r\n * @returns {String} Extracted barcode string\r\n */\r\nasync function barcodeDecoder(image, options) {\r\n  // eslint-disable-next-line\r\n  options.barcode = options.barcode.toLowerCase()\r\n  const list = Object.keys(BARCODE_DECODERS)\r\n\r\n  if (list.indexOf(options.barcode) === -1) {\r\n    throw new Error(\r\n      `Invalid barcode specified. Available decoders: ${list}. https://github.com/mubaidr/Javascript-Barcode-Reader#available-decoders`\r\n    )\r\n  }\r\n\r\n  const { data, width, height } = await UTILITIES.getImageDataFromSource(image)\r\n  const channels = data.length / (width * height)\r\n\r\n  // check points for barcode location\r\n  const spoints = [1, 9, 2, 8, 3, 7, 4, 6, 5]\r\n  let numLines = spoints.length\r\n  const slineStep = height / (numLines + 1)\r\n\r\n  // eslint-disable-next-line\r\n  while ((numLines -= 1)) {\r\n    // create section of height 2\r\n    const start = channels * width * Math.floor(slineStep * spoints[numLines])\r\n    const end =\r\n      channels * width * Math.floor(slineStep * spoints[numLines]) +\r\n      2 * channels * width\r\n    // const pxLine = data.slice(start, end)\r\n\r\n    // const { lines, padding } = UTILITIES.getLines({\r\n    const { lines, padding } = UTILITIES.getLines({\r\n      data,\r\n      start,\r\n      end,\r\n      width,\r\n      height,\r\n      channels,\r\n    })\r\n\r\n    if (lines && lines.length !== 0) {\r\n      // remove empty whitespaces on side of barcode\r\n      if (padding.left) lines.shift()\r\n      if (padding.right) lines.pop()\r\n\r\n      // Run the decoder\r\n      const result = BARCODE_DECODERS[options.barcode](lines, options.type)\r\n\r\n      if (result) {\r\n        return result\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('Failed to extract barcode!')\r\n}\r\n\r\nif (module && module.exports) {\r\n  module.exports = barcodeDecoder\r\n} else {\r\n  global.javascriptBarcodeReader = barcodeDecoder\r\n}\r\n"],"names":["isNode","process","release","name","createImageData","image","canvas","document","createElement","ctx","getContext","width","naturalWidth","height","naturalHeight","drawImage","getImageData","source","isURLSource","isStringSource","s","test","tagName","Promise","resolve","reject","Jimp","read","url","headers","err","bitmap","data","toJSON","img","Image","onerror","onload","src","imgElem","getElementById","Error","getImageDataFromSource","getLines","obj","start","end","channels","pxLine","slice","sum","bmp","lines","count","min","max","padding","left","right","row","col","i","g","pivot","matches","value","push","curr","WIDTH_TBL","TBL_A","TBL_B","TBL_C","computeGroup","factor","reduce","pre","item","map","Math","round","join","lookupTBL","sumOP","letterKey","letterCode","keyIndex","code","pop","seq","splice","length","indexOf","CHAR_SET","type","barThreshold","ceil","startChar","line","endChar","seg","a","filter","index","b","nnnwwnwnn","wnnwnnnnw","nnwwnnnnw","wnwwnnnnn","nnnwwnnnw","wnnwwnnnn","nnwwwnnnn","nnnwnnwnw","wnnwnnwnn","nnwwnnwnn","wnnnnwnnw","nnwnnwnnw","wnwnnwnnn","nnnnwwnnw","wnnnwwnnn","nnwnwwnnn","nnnnnwwnw","wnnnnwwnn","nnwnnwwnn","nnnnwwwnn","wnnnnnnww","nnwnnnnww","wnwnnnnwn","nnnnwnnww","wnnnwnnwn","nnwnwnnwn","nnnnnnwww","wnnnnnwwn","nnwnnnwwn","nnnnwnwwn","wwnnnnnnw","nwwnnnnnw","wwwnnnnnn","nwnnwnnnw","wwnnwnnnn","nwwnwnnnn","nwnnnnwnw","wwnnnnwnn","nwwnnnwnn","nwnwnwnnn","nwnwnnnwn","nwnnnwnwn","nnnwnwnwn","nwnnwnwnn","sequenceBar","shift","binary","minBarWidth","segment","searcKey","char","Object","keys","letter","K","findValue","values","C","UPC_SET","unshift","bar","group","digits","result","reverse","nnnnnww","nnnnwwn","nnnwnnw","wwnnnnn","nnwnnwn","wnnnnwn","nwnnnnw","nwnnwnn","nwwnnnn","wnnwnnn","nnnwwnn","nnwwnnn","wnnnwnw","wnwnnnw","wnwnwnn","nnwwwww","nnwwnwn","nnnwnww","nwnwnnw","nnnwwwn","BARCODE_DECODERS","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","codabar","require$$6","barcodeDecoder","options","barcode","toLowerCase","list","UTILITIES","numLines","spoints","slineStep","floor","module","exports","global","javascriptBarcodeReader"],"mappings":"sxBAEA,IAAMA,EACe,gCAAZC,sBAAAA,WACPA,QAAQC,SACiB,SAAzBD,QAAQC,QAAQC,KAYlB,SAASC,EAAgBC,OACjBC,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MACxBC,EAAQN,EAAMO,aACdC,EAASR,EAAMS,qBAErBR,EAAOK,MAAQA,EACfL,EAAOO,OAASA,EAEhBJ,EAAIM,UAAUV,EAAO,EAAG,GAEjBI,EAAIO,aAAa,EAAG,EAAGX,EAAMO,aAAcP,EAAMS,+DAQ1D,WAAsCG,mGAE9BC,KADAC,EAAmC,iBAAXF,KA3Bb,QAFJG,EA8B8BH,GA5BjC,IADK,oFACgBI,KAAKD,IA6B5BE,EAAYL,EAAZK,0BAED,IAAIC,QAAQ,SAACC,EAASC,MAEvBN,KAEEnB,EACF0B,EAAKC,KACHT,EAAc,CAAEU,IAAKX,EAAQY,QAAS,IAAOZ,EAC7C,SAACa,EAAKzB,MACAyB,EACFL,EAAOK,OACF,OAC2BzB,EAAM0B,OAA9BC,IAAAA,KAAMrB,IAAAA,MAAOE,IAAAA,OACrBW,EAAQ,CACNQ,KAAMA,EAAKC,SAASD,KACpBrB,MAAAA,EACAE,OAAAA,YAKH,GAAIK,EAAa,KAEhBgB,EAAM,IAAIC,MAChBD,EAAIE,QAAUX,EACdS,EAAIG,OAAS,kBAAMb,EAAQpB,EAAgB8B,KAC3CA,EAAII,IAAMrB,MACL,KAECsB,EAAUhC,SAASiC,eAAevB,GACpCsB,GACFf,EAAQpB,EAAgBmC,IAG1Bd,EAAO,IAAIgB,MAAM,yCAEVnB,GAEO,QAAZA,EACFE,EAAQpB,EAAgBa,IAGL,WAAZK,GACPE,EACEP,EACGP,WAAW,MACXM,aAAa,EAAG,EAAGC,EAAOL,aAAcK,EAAOH,gBAItDW,EAAO,IAAIgB,MAAM,qCAGVxB,EAAOe,MAAQf,EAAON,OAASM,EAAOJ,OAC7CW,EAAQP,GAERQ,EAAO,IAAIgB,MAAM,wEAxFvB,IAAerB,gCA8Kf,QAAiB,CACfsB,mEACAC,SAnFF,SAAkBC,WACRZ,EAAsCY,EAAtCZ,KAAMa,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,IAAKC,EAAoBH,EAApBG,SAAUpC,EAAUiC,EAAVjC,MAC9BqC,EAAShB,EAAKiB,MAAMJ,EAAOC,GAC3BI,EAAM,GACNC,EAAM,GACNC,EAAQ,GACVC,EAAQ,EACRC,EAAM,EACNC,EAAM,EAEJC,EAAU,CAAEC,MAAM,EAAMC,OAAO,GAG5BC,EAAM,EAAGA,EAAM,EAAGA,GAAO,MAC3B,IAAIC,EAAM,EAAGA,EAAMjD,EAAOiD,GAAO,EAAG,KACjCC,GAAKF,EAAMhD,EAAQiD,GAAOb,EAC1Be,GAAiB,EAAZd,EAAOa,GAAyB,EAAhBb,EAAOa,EAAI,GAAyB,EAAhBb,EAAOa,EAAI,IAAU,EAC9DzC,EAAI8B,EAAIU,GAEdZ,EAAOa,GAAKC,EACZd,EAAOa,EAAI,GAAKC,EAChBd,EAAOa,EAAI,GAAKC,EAEhBZ,EAAIU,GAAOE,GAAK1C,GAAK,OAIpB,IAAIyC,EAAI,EAAGA,EAAIlD,EAAOkD,GAAK,EAAG,CACjCX,EAAIW,IAAM,MACJzC,EAAI8B,EAAIW,GAEVzC,EAAIkC,EACNA,EAAMlC,EAENmC,EAAMnC,UAKJ2C,EAAQT,GAAOC,EAAMD,GAAO,EAEzBM,EAAM,EAAGA,EAAMjD,EAAOiD,GAAO,EAAG,SACnCI,EAAU,EACVC,SAEKN,EAAM,EAAGA,EAAM,EAAGA,GAAO,GAChCM,EAAQjB,GAAQW,EAAMhD,EAAQiD,GAAOb,IAEzBgB,IACVC,GAAW,GAIH,IAARJ,GAAaK,GAASF,IAAOP,EAAQC,MAAO,GAC5CG,IAAQjD,EAAQ,GAAKsD,GAASF,IAChCP,EAAQE,OAAQ,GAGlBP,EAAIe,KAAKF,EAAU,WAIjBG,EAAOhB,EAAI,GAENS,EAAM,EAAGA,EAAMjD,EAAOiD,GAAO,EAChCT,EAAIS,KAASO,GACfd,GAAS,EAELO,IAAQjD,EAAQ,GAClByC,EAAMc,KAAKb,KAGbD,EAAMc,KAAKb,GACXA,EAAQ,EACRc,EAAOhB,EAAIS,UAIR,CAAER,MAAAA,EAAOI,QAAAA,KCnLZY,EAAY,CAChe,SAAApB,OAEbqB,EAASrB,EAAMsB,OAAO,SAACC,EAAKC,UAASD,EAAMC,GAAM,GAAK,UAErDxB,EAAMyB,IAAI,SAAAD,UAAQE,KAAKC,MAAMH,EAAKH,KAASO,KAAK,OAGxC,SAAA5B,OACX6B,EAAeC,EAAWC,EAAeC,EAAgBC,EACvDC,EAAO,GAGblC,EAAMmC,UAEAC,EAAMpC,EAAMH,MAAM,UAExBkC,EAAYX,EAAagB,EAAIC,OAAO,EAAG,SAGhC,SACHR,EAAYX,EACZY,EAAQ,cAEL,SACHD,EAAYV,EACZW,EAAQ,kBAGRD,EAAYZ,EACZa,EAAQ,QAIP,IAAIrB,EAAI,EAAG2B,EAAIE,OAAS,GAAI7B,GAAK,SACpCsB,EAAYX,EAAagB,EAAIC,OAAO,EAAG,IAEvCP,GAASrB,GADTwB,EAAWjB,EAAUuB,QAAQR,IAE7BC,EAAaH,EAAUI,QAGhB,SACHJ,EAAYZ,YAET,SACHY,EAAYX,YAET,SACHW,EAAYV,gBAGZe,EAAKpB,KAAKkB,UAKhBD,EAAYX,EAAagB,EAAIC,OAAO,EAAG,IAEnCP,EAAQ,MAAQd,EAAUuB,QAAQR,GAAmB,KAElDG,EAAKN,KAAK,KCzebY,EAAW,CACf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,WAGe,SAACxC,OAAOyC,yDAAO,WACxBP,EAAO,GAEPQ,EAAehB,KAAKiB,KACxB3C,EAAMsB,OAAO,SAACC,EAAKC,UAAUD,EAAMC,GAAQ,GAAG,OAGnC,gBAATiB,EAAwB,KAEpBG,EAAY5C,EACfqC,OAAO,EAAG,GACVZ,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MACzCd,KAAK,IAEFkB,EAAU9C,EACbqC,OAAOrC,EAAMsC,OAAS,EAAG,GACzBb,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MACzCd,KAAK,OAEU,SAAdgB,GAAoC,QAAZE,EAAmB,OAAO,UAG/C9C,EAAMsC,OAAS,GAAG,KACjBS,EAAM/C,EAAMqC,OAAO,EAAG,IAEtBW,EAAID,EACPE,OAAO,SAACzB,EAAM0B,UAAUA,EAAQ,GAAM,IACtCzB,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MACzCd,KAAK,IAERM,EAAKpB,KAAK0B,EAASD,QAAQS,QAErBG,EAAIJ,EACPE,OAAO,SAACzB,EAAM0B,UAAUA,EAAQ,GAAM,IACtCzB,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MACzCd,KAAK,IAERM,EAAKpB,KAAK0B,EAASD,QAAQY,UAExB,GAAa,aAATV,EAAqB,KAExBG,EAAY5C,EACfqC,OAAO,EAAG,GACVY,OAAO,SAACzB,EAAM0B,UAAUA,EAAQ,GAAM,IACtCzB,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MACzCd,KAAK,IAEFkB,EAAU9C,EACbqC,OAAOrC,EAAMsC,OAAS,EAAG,GACzBW,OAAO,SAACzB,EAAM0B,UAAUA,EAAQ,GAAM,IACtCzB,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MACzCd,KAAK,OAEU,QAAdgB,GAAmC,QAAZE,EAAmB,OAAO,UAG9C9C,EAAMsC,OAAS,GAAG,KACjBU,EAAIhD,EACPqC,OAAO,EAAG,IACVY,OAAO,SAACzB,EAAM0B,UAAUA,EAAQ,GAAM,IACtCzB,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MACzCd,KAAK,IAERM,EAAKpB,KAAK0B,EAASD,QAAQS,YAIxBd,EAAKN,KAAK,KChFbY,EAAW,CACfY,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,IACXC,UAAW,OAGI,SAAA/F,WACTkC,EAAO,GAEPQ,EAAehB,KAAKiB,KACxB3C,EAAMsB,OAAO,SAACC,EAAKC,UAASD,EAAMC,GAAM,GAAKxB,EAAMsC,QAI9CtC,EAAMsC,OAAS,GAAG,KACjB0D,EAAchG,EACjBqC,OAAO,EAAG,IACVZ,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MAE5CR,EAAKpB,KAAK0B,EAASwD,EAAYnG,MAAM,EAAG,GAAG+B,KAAK,YAG/B,MAAfM,EAAKC,OAAkC,MAAjBD,EAAK+D,QAAwB,KAEhD/D,EAAKN,KAAK,KCjEbY,EAAW,CACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,KACf,WAAe,OACf,WAAe,OACf,WAAe,OACf,WAAe,OACf,WAAe,QAGA,SAAAxC,OACTkC,EAAO,GACPgE,EAAS,GAGflG,EAAMmC,cAEAO,EAAehB,KAAKiB,KACxB3C,EAAMsB,OAAO,SAACC,EAAKC,UAASD,EAAMC,GAAM,GAAKxB,EAAMsC,QAG/C6D,EAAczE,KAAKiB,KACvB3C,EAAMsB,OAAO,SAACC,EAAKC,UACbA,EAAOkB,GAAsBnB,EAAMC,GAAQ,EACxCD,GACN,IAIId,EAAI,EAAGA,EAAIT,EAAMsC,OAAQ7B,GAAK,UACjC2F,EAAUpG,EAAMS,GAEb2F,EAAU,GACX3F,EAAI,GAAM,EACZyF,EAAOpF,KAAK,GAEZoF,EAAOpF,KAAK,GAEdsF,GAAWD,qBAIN1F,OACD4F,EAAWH,EAAOrG,MAAMY,EAAGA,EAAI,GAAGmB,KAAK,IAEvC0E,EAAO9D,EAASS,OAAO,SAAAzB,UAAQ+E,OAAOC,KAAKhF,GAAM,KAAO6E,IAE9DnE,EAAKpB,KAAKwF,EAAK,GAAGD,KALX5F,EAAI,EAAGA,EAAIyF,EAAO5D,OAAQ7B,GAAK,IAA/BA,MAQY,MAAjByB,EAAK+D,SAAkC,MAAf/D,EAAKC,MAAe,OAAO,aAInDsE,EAFEC,EAAIxE,EAAKC,MACXrC,EAAM,EAEJ6G,EAAY,SAAAnF,UAAQ+E,OAAOK,OAAOpF,GAAM,KAAOiF,GAE5ChG,EAAIyB,EAAKI,OAAS,EAAG7B,GAAK,EAAGA,GAAK,EACzCgG,EAASvE,EAAKzB,GAEdX,GADQ0C,EAASD,QAAQC,EAASS,OAAO0D,GAAW,KACpC,GAAMzE,EAAKI,QAAU7B,EAAI,IAAM,OAG7C8F,OAAOK,OAAOpE,EAAS1C,EAAM,KAAK,KAAO4G,EAAG,OAAO,SAEjDG,EAAI3E,EAAKC,MACfrC,EAAM,MAED,IAAIW,EAAIyB,EAAKI,OAAS,EAAG7B,GAAK,EAAGA,GAAK,EACzCgG,EAASvE,EAAKzB,GAEdX,GADQ0C,EAASD,QAAQC,EAASS,OAAO0D,GAAW,KACpC,GAAMzE,EAAKI,QAAU7B,EAAI,IAAM,WAG7C8F,OAAOK,OAAOpE,EAAS1C,EAAM,KAAK,KAAO+G,EAAU,KAEhD3E,EAAKN,KAAK,KCrHbkF,EAAU,MACN,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OAGO,SAAA9G,OACXkC,EAAO,GAEXlC,EAAM+G,QAAQ,WAERC,MAAUhH,EAAM,GAAKA,EAAM,GAAKA,EAAM,IAAM,GAEzCS,EAAI,EAAGA,EAAIT,EAAMsC,OAAQ7B,GAAK,EAAG,KACpCwG,SAGFA,EADE/E,EAAKI,OAAS,EACRtC,EAAMH,MAAU,EAAJY,EAAW,EAAJA,EAAQ,GAE3BT,EAAMH,MAAU,EAAJY,EAAQ,EAAO,EAAJA,EAAQ,OAGnCyG,EAAS,CACbxF,KAAKC,MAAMsF,EAAM,GAAKD,GACtBtF,KAAKC,MAAMsF,EAAM,GAAKD,GACtBtF,KAAKC,MAAMsF,EAAM,GAAKD,GACtBtF,KAAKC,MAAMsF,EAAM,GAAKD,IAGlBG,EACJL,EAAQI,EAAOtF,KAAK,MAAQkF,EAAQI,EAAOE,UAAUxF,KAAK,QAExDuF,IACFjF,GAAQiF,GAGU,KAAhBjF,EAAKI,OAAe,aAGnBJ,GC9CH4E,EAAU,MACN,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OAGO,SAAA9G,OACXkC,EAAO,GAEXlC,EAAM+G,QAAQ,WAERC,MAAUhH,EAAM,GAAKA,EAAM,GAAKA,EAAM,IAAM,GAEzCS,EAAI,EAAGA,EAAIT,EAAMsC,OAAQ7B,GAAK,EAAG,KACpCwG,SAGFA,EADE/E,EAAKI,OAAS,EACRtC,EAAMH,MAAU,EAAJY,EAAW,EAAJA,EAAQ,GAE3BT,EAAMH,MAAU,EAAJY,EAAQ,EAAO,EAAJA,EAAQ,OAGnCyG,EAAS,CACbxF,KAAKC,MAAMsF,EAAM,GAAKD,GACtBtF,KAAKC,MAAMsF,EAAM,GAAKD,GACtBtF,KAAKC,MAAMsF,EAAM,GAAKD,GACtBtF,KAAKC,MAAMsF,EAAM,GAAKD,IAGlBG,EACJL,EAAQI,EAAOtF,KAAK,MAAQkF,EAAQI,EAAOE,UAAUxF,KAAK,QAExDuF,IACFjF,GAAQiF,GAGU,IAAhBjF,EAAKI,OAAc,aAGlBJ,GC9CHM,EAAW,CACf6E,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,IACTC,QAAS,OAGM,SAAAxI,WACTkC,EAAO,GAEPQ,EAAehB,KAAKiB,KACxB3C,EAAMsB,OAAO,SAACC,EAAKC,UAAUD,EAAMC,GAAQ,GAAG,IAIzCxB,EAAMsC,OAAS,GAAG,KAGjBU,EAFMhD,EAAMqC,OAAO,EAAG,GAAGA,OAAO,EAAG,GAE3BZ,IAAI,SAAAoB,UAASA,EAAOH,EAAe,IAAM,MAAMd,KAAK,IAElEM,EAAKpB,KAAK0B,EAASQ,WAGdd,EAAKN,KAAK,4BCpCb6G,EAAmB,YACXC,cACCC,YACFC,YACAC,WACDC,UACDC,EACTC,QAASC,YAaIC,sFAAf,WAA8BjM,EAAOkM,uHAEnCA,EAAQC,QAAUD,EAAQC,QAAQC,eAGK,KAFjCC,EAAO/C,OAAOC,KAAKiC,IAEhBlG,QAAQ4G,EAAQC,+BACjB,IAAI/J,+DAC0CiK,uGAIhBC,EAAUjK,uBAAuBrC,mBAA/D2B,IAAAA,KAAMrB,IAAAA,MAAOE,IAAAA,OACfkC,EAAWf,EAAK0D,QAAU/E,EAAQE,GAIpC+L,GADEC,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClBnH,OACjBoH,EAAYjM,GAAU+L,EAAW,gBAG/BA,GAAY,uBAEZ/J,EAAQE,EAAWpC,EAAQmE,KAAKiI,MAAMD,EAAYD,EAAQD,IAC1D9J,EACJC,EAAWpC,EAAQmE,KAAKiI,MAAMD,EAAYD,EAAQD,IAClD,EAAI7J,EAAWpC,IAIUgM,EAAUhK,SAAS,CAC5CX,KAAAA,EACAa,MAAAA,EACAC,IAAAA,EACAnC,MAAAA,EACAE,OAAAA,EACAkC,SAAAA,IANMK,IAAAA,MAAOI,IAAAA,SASXJ,GAA0B,IAAjBA,EAAMsC,2BAEblC,EAAQC,MAAML,EAAMiG,QACpB7F,EAAQE,OAAON,EAAMmC,QAGnBgF,EAASsB,EAAiBU,EAAQC,SAASpJ,EAAOmJ,EAAQ1G,iDAGvD0E,yCAKP,IAAI9H,MAAM,+FAGduK,GAAUA,EAAOC,QACnBD,UAAiBV,EAEjBY,EAAOC,wBAA0Bb"}