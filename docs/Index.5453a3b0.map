{"version":3,"sources":["..\\src\\Index.js"],"names":["UPC_SET","decoder","doc","document","img","imgOrId","getElementById","canvas","createElement","ctx","getContext","width","height","spoints","numLines","length","slineStep","drawImage","pxLine","getImageData","data","sum","min","max","row","col","i","g","s","undefined","pivot","bmp","matches","push","curr","count","lines","code","bar","group","slice","digits","Math","round","join","reverse","indexOf","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,UAAU;AACd,UAAQ,GADM;AAEd,UAAQ,GAFM;AAGd,UAAQ,GAHM;AAId,UAAQ,GAJM;AAKd,UAAQ,GALM;AAMd,UAAQ,GANM;AAOd,UAAQ,GAPM;AAQd,UAAQ,GARM;AASd,UAAQ,GATM;AAUd,UAAQ;AAVM,CAAhB;;AAaA,IAAMC,UAAU,SAAVA,OAAU,UAAW;AACzB,MAAMC,MAAMC,QAAZ;AACA,MAAMC,MACJ,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,GAA8BA,OAA9B,GAAwCH,IAAII,cAAJ,CAAmBD,OAAnB,CAD1C;AAEA,MAAME,SAASL,IAAIM,aAAJ,CAAkB,QAAlB,CAAf;AACA,MAAMC,MAAMF,OAAOG,UAAP,CAAkB,IAAlB,CAAZ;AALyB,MAMjBC,KANiB,GAMCP,GAND,CAMjBO,KANiB;AAAA,MAMVC,MANU,GAMCR,GAND,CAMVQ,MANU;;AAQzB;;AACA,MAAMC,UAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAhB;AACA,MAAIC,WAAWD,QAAQE,MAAvB;AACA,MAAMC,YAAYJ,UAAUE,WAAW,CAArB,CAAlB;;AAEAP,SAAOI,KAAP,GAAeA,KAAf;AACAJ,SAAOK,MAAP,GAAgBA,MAAhB;AACAH,MAAIQ,SAAJ,CAAcb,GAAd,EAAmB,CAAnB,EAAsB,CAAtB;;AAEA;AACA,SAAQU,YAAY,CAApB,EAAwB;AACtB;AACA,QAAMI,SAAST,IAAIU,YAAJ,CAAiB,CAAjB,EAAoBH,YAAYH,QAAQC,QAAR,CAAhC,EAAmDH,KAAnD,EAA0D,CAA1D,EACZS,IADH;AAEA,QAAMC,MAAM,EAAZ;AACA,QAAIC,MAAM,CAAV;AACA,QAAIC,MAAM,CAAV;;AAEA;AACA,SAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAM,CAAxB,EAA2BA,OAAO,CAAlC,EAAqC;AACnC,WAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAMd,KAAxB,EAA+Bc,OAAO,CAAtC,EAAyC;AACvC,YAAMC,IAAI,CAACF,MAAMb,KAAN,GAAcc,GAAf,IAAsB,CAAhC;AACA,YAAME,IAAI,CAACT,OAAOQ,CAAP,IAAY,CAAZ,GAAgBR,OAAOQ,IAAI,CAAX,IAAgB,CAAhC,GAAoCR,OAAOQ,IAAI,CAAX,IAAgB,CAArD,IAA0D,CAApE;AACA,YAAME,IAAIP,IAAII,GAAJ,CAAV;;AAEAP,eAAOQ,CAAP,IAAYC,CAAZ;AACAT,eAAOQ,IAAI,CAAX,IAAgBC,CAAhB;AACAT,eAAOQ,IAAI,CAAX,IAAgBC,CAAhB;;AAEAN,YAAII,GAAJ,IAAWE,KAAKC,MAAMC,SAAN,GAAkB,CAAlB,GAAsBD,CAA3B,CAAX;AACD;AACF;;AAED,SAAK,IAAIF,KAAI,CAAb,EAAgBA,KAAIf,KAApB,EAA2Be,MAAK,CAAhC,EAAmC;AACjCL,UAAIK,EAAJ,KAAU,CAAV;AACA,UAAME,KAAIP,IAAIK,EAAJ,CAAV;;AAEA,UAAIE,KAAIN,GAAR,EAAa;AACXA,cAAMM,EAAN;AACD;AACD,UAAIA,KAAIL,GAAR,EAAa;AACXA,cAAMK,EAAN;AACD;AACF;;AAED;AACA,QAAME,QAAQR,MAAM,CAACC,MAAMD,GAAP,IAAc,CAAlC;AACA,QAAMS,MAAM,EAAZ;;AAEA,SAAK,IAAIN,OAAM,CAAf,EAAkBA,OAAMd,KAAxB,EAA+Bc,QAAO,CAAtC,EAAyC;AACvC,UAAIO,UAAU,CAAd;AACA,WAAK,IAAIR,OAAM,CAAf,EAAkBA,OAAM,CAAxB,EAA2BA,QAAO,CAAlC,EAAqC;AACnC,YAAIN,OAAO,CAACM,OAAMb,KAAN,GAAcc,IAAf,IAAsB,CAA7B,IAAkCK,KAAtC,EAA6C;AAC3CE,qBAAW,CAAX;AACD;AACF;AACDD,UAAIE,IAAJ,CAASD,UAAU,CAAnB;AACD;;AAED;AACA,QAAIE,OAAOH,IAAI,CAAJ,CAAX;AACA,QAAII,QAAQ,CAAZ;AACA,QAAMC,QAAQ,EAAd;;AAEA,SAAK,IAAIX,QAAM,CAAf,EAAkBA,QAAMd,KAAxB,EAA+Bc,SAAO,CAAtC,EAAyC;AACvC,UAAIM,IAAIN,KAAJ,MAAaS,IAAjB,EAAuB;AACrBC,iBAAS,CAAT;AACD,OAFD,MAEO;AACLC,cAAMH,IAAN,CAAWE,KAAX;AACAA,gBAAQ,CAAR;AACAD,eAAOH,IAAIN,KAAJ,CAAP;AACD;AACF;;AAED,QAAIY,OAAO,EAAX;AACA;AACA,QAAMC,MAAM,CAAC,EAAE,CAACF,MAAM,CAAN,IAAWA,MAAM,CAAN,CAAX,GAAsBA,MAAM,CAAN,CAAvB,IAAmC,CAArC,CAAb,CAlEsB,CAkE+B;;AAErD,SAAK,IAAIV,MAAI,CAAb,EAAgBA,MAAIU,MAAMrB,MAA1B,EAAkCW,OAAK,CAAvC,EAA0C;AACxC,UAAIa,cAAJ;;AAEA,UAAIF,KAAKtB,MAAL,GAAc,CAAlB,EAAqB;AACnBwB,gBAAQH,MAAMI,KAAN,CAAYd,MAAI,CAAhB,EAAmBA,MAAI,CAAJ,GAAQ,CAA3B,CAAR;AACD,OAFD,MAEO;AACLa,gBAAQH,MAAMI,KAAN,CAAYd,MAAI,CAAJ,GAAQ,CAApB,EAAuBA,MAAI,CAAJ,GAAQ,CAA/B,CAAR;AACD;;AAED,UAAMe,SAAS,CACbC,KAAKC,KAAL,CAAWJ,MAAM,CAAN,IAAWD,GAAtB,CADa,EAEbI,KAAKC,KAAL,CAAWJ,MAAM,CAAN,IAAWD,GAAtB,CAFa,EAGbI,KAAKC,KAAL,CAAWJ,MAAM,CAAN,IAAWD,GAAtB,CAHa,EAIbI,KAAKC,KAAL,CAAWJ,MAAM,CAAN,IAAWD,GAAtB,CAJa,CAAf;;AAOAD,cACErC,QAAQyC,OAAOG,IAAP,CAAY,EAAZ,CAAR,KAA4B5C,QAAQyC,OAAOI,OAAP,GAAiBD,IAAjB,CAAsB,EAAtB,CAAR,CAA5B,IAAkE,GADpE;;AAGA,UAAIP,KAAKtB,MAAL,KAAgB,EAApB,EAAwB;AACtB,eAAOsB,IAAP;AACA;AACA;AACD;AACF;AACD,QAAIA,KAAKS,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5B,aAAOT,QAAQ,KAAf;AACD;AACF;AACD,SAAO,KAAP;AACD,CApHD;;AAsHA,IAAIU,MAAJ,EAAY;AACVA,SAAOC,OAAP,GAAiB,EAAE/C,gBAAF,EAAjB;AACD","file":"Index.5453a3b0.map","sourceRoot":"..\\docs-src","sourcesContent":["const UPC_SET = {\r\n  '3211': '0',\r\n  '2221': '1',\r\n  '2122': '2',\r\n  '1411': '3',\r\n  '1132': '4',\r\n  '1231': '5',\r\n  '1114': '6',\r\n  '1312': '7',\r\n  '1213': '8',\r\n  '3112': '9',\r\n}\r\n\r\nconst decoder = imgOrId => {\r\n  const doc = document\r\n  const img =\r\n    typeof imgOrId === 'object' ? imgOrId : doc.getElementById(imgOrId)\r\n  const canvas = doc.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n  const { width, height } = img\r\n\r\n  // check points for barcode location\r\n  const spoints = [1, 9, 2, 8, 3, 7, 4, 6, 5]\r\n  let numLines = spoints.length\r\n  const slineStep = height / (numLines + 1)\r\n\r\n  canvas.width = width\r\n  canvas.height = height\r\n  ctx.drawImage(img, 0, 0)\r\n\r\n  // eslint-disable-next-line\r\n  while ((numLines -= 1)) {\r\n    // create section of height 2\r\n    const pxLine = ctx.getImageData(0, slineStep * spoints[numLines], width, 2)\r\n      .data\r\n    const sum = []\r\n    let min = 0\r\n    let max = 0\r\n\r\n    // grey scale section and sum of columns pixels in section\r\n    for (let row = 0; row < 2; row += 1) {\r\n      for (let col = 0; col < width; col += 1) {\r\n        const i = (row * width + col) * 4\r\n        const g = (pxLine[i] * 3 + pxLine[i + 1] * 4 + pxLine[i + 2] * 2) / 9\r\n        const s = sum[col]\r\n\r\n        pxLine[i] = g\r\n        pxLine[i + 1] = g\r\n        pxLine[i + 2] = g\r\n\r\n        sum[col] = g + (s === undefined ? 0 : s)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < width; i += 1) {\r\n      sum[i] /= 2\r\n      const s = sum[i]\r\n\r\n      if (s < min) {\r\n        min = s\r\n      }\r\n      if (s > max) {\r\n        max = s\r\n      }\r\n    }\r\n\r\n    // matches columns in two rows\r\n    const pivot = min + (max - min) / 2\r\n    const bmp = []\r\n\r\n    for (let col = 0; col < width; col += 1) {\r\n      let matches = 0\r\n      for (let row = 0; row < 2; row += 1) {\r\n        if (pxLine[(row * width + col) * 4] > pivot) {\r\n          matches += 1\r\n        }\r\n      }\r\n      bmp.push(matches > 1)\r\n    }\r\n\r\n    // matches width of barcode lines\r\n    let curr = bmp[0]\r\n    let count = 1\r\n    const lines = []\r\n\r\n    for (let col = 0; col < width; col += 1) {\r\n      if (bmp[col] === curr) {\r\n        count += 1\r\n      } else {\r\n        lines.push(count)\r\n        count = 1\r\n        curr = bmp[col]\r\n      }\r\n    }\r\n\r\n    let code = ''\r\n    // start indicator/reference lines\r\n    const bar = ~~((lines[1] + lines[2] + lines[3]) / 3) //eslint-disable-line\r\n\r\n    for (let i = 1; i < lines.length; i += 1) {\r\n      let group\r\n\r\n      if (code.length < 6) {\r\n        group = lines.slice(i * 4, i * 4 + 4)\r\n      } else {\r\n        group = lines.slice(i * 4 + 5, i * 4 + 9)\r\n      }\r\n\r\n      const digits = [\r\n        Math.round(group[0] / bar),\r\n        Math.round(group[1] / bar),\r\n        Math.round(group[2] / bar),\r\n        Math.round(group[3] / bar),\r\n      ]\r\n\r\n      code +=\r\n        UPC_SET[digits.join('')] || UPC_SET[digits.reverse().join('')] || 'X'\r\n\r\n      if (code.length === 12) {\r\n        return code\r\n        // eslint-disable-next-line\r\n        break\r\n      }\r\n    }\r\n    if (code.indexOf('X') === -1) {\r\n      return code || false\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nif (module) {\r\n  module.exports = { decoder }\r\n}\r\n"]}