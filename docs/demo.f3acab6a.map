{"version":3,"sources":["..\\src\\ean-13\\index.js","..\\src\\ean-8\\index.js","..\\src\\code-39\\index.js","..\\src\\code-93\\index.js","..\\src\\2of5\\index.js","..\\src\\index.js","demo.js"],"names":["UPC_SET","module","exports","code","unshift","bar","lines","i","length","group","slice","digits","Math","round","result","join","reverse","CHAR_SET","barThreshold","ceil","reduce","pre","item","sequenceBar","splice","map","line","push","pop","shift","binary","minBarWidth","segment","searcKey","filter","Object","keys","K","sum","letter","findValue","values","Value","indexOf","C","type","startChar","index","endChar","DecoderEAN13","require","DecoderEAN8","DecoderCode39","DecoderCode93","DecoderCode2of5","BARCODE_DECODERS","barcodeDecoder","imageSource","options","imageDataInput","document","getElementById","elementType","tagName","canvas","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","getImageData","data","Error","numLines","spoints","slineStep","start","floor","end","pxLine","min","max","row","col","g","s","undefined","pivot","bmp","matches","curr","count","barcode","window","javascriptBarcodeReader","buttons","getElementsByTagName","button","getAttribute","subType","img","onclick"],"mappings":"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","file":"demo.f3acab6a.map","sourceRoot":"..\\docs-src","sourcesContent":["const UPC_SET = {\r\n  '3211': '0',\r\n  '2221': '1',\r\n  '2122': '2',\r\n  '1411': '3',\r\n  '1132': '4',\r\n  '1231': '5',\r\n  '1114': '6',\r\n  '1312': '7',\r\n  '1213': '8',\r\n  '3112': '9',\r\n}\r\n\r\nmodule.exports = lines => {\r\n  let code = ''\r\n  // manually add start dummy line\r\n  lines.unshift(0)\r\n  // start indicator/reference lines\r\n  const bar = ~~((lines[1] + lines[2] + lines[3]) / 3) //eslint-disable-line\r\n\r\n  for (let i = 1; i < lines.length; i += 1) {\r\n    let group\r\n\r\n    if (code.length < 6) {\r\n      group = lines.slice(i * 4, i * 4 + 4)\r\n    } else {\r\n      group = lines.slice(i * 4 + 5, i * 4 + 9)\r\n    }\r\n\r\n    const digits = [\r\n      Math.round(group[0] / bar),\r\n      Math.round(group[1] / bar),\r\n      Math.round(group[2] / bar),\r\n      Math.round(group[3] / bar),\r\n    ]\r\n\r\n    const result =\r\n      UPC_SET[digits.join('')] || UPC_SET[digits.reverse().join('')]\r\n\r\n    if (result) {\r\n      code += result\r\n    } else {\r\n      return result\r\n    }\r\n\r\n    if (code.length === 12) break\r\n  }\r\n\r\n  return code\r\n}\r\n","const UPC_SET = {\r\n  '3211': '0',\r\n  '2221': '1',\r\n  '2122': '2',\r\n  '1411': '3',\r\n  '1132': '4',\r\n  '1231': '5',\r\n  '1114': '6',\r\n  '1312': '7',\r\n  '1213': '8',\r\n  '3112': '9',\r\n}\r\n\r\nmodule.exports = lines => {\r\n  let code = ''\r\n  // manually add start dummy line\r\n  lines.unshift(0)\r\n  // start indicator/reference lines\r\n  const bar = ~~((lines[1] + lines[2] + lines[3]) / 3) //eslint-disable-line\r\n\r\n  for (let i = 1; i < lines.length; i += 1) {\r\n    let group\r\n\r\n    if (code.length < 4) {\r\n      group = lines.slice(i * 4, i * 4 + 4)\r\n    } else {\r\n      group = lines.slice(i * 4 + 5, i * 4 + 9)\r\n    }\r\n\r\n    const digits = [\r\n      Math.round(group[0] / bar),\r\n      Math.round(group[1] / bar),\r\n      Math.round(group[2] / bar),\r\n      Math.round(group[3] / bar),\r\n    ]\r\n\r\n    const result =\r\n      UPC_SET[digits.join('')] || UPC_SET[digits.reverse().join('')]\r\n\r\n    if (result) {\r\n      code += result\r\n    } else {\r\n      return result\r\n    }\r\n\r\n    if (code.length === 8) break\r\n  }\r\n\r\n  return code\r\n}\r\n","const CHAR_SET = {\r\n  nnnwwnwnn: '0',\r\n  wnnwnnnnw: '1',\r\n  nnwwnnnnw: '2',\r\n  wnwwnnnnn: '3',\r\n  nnnwwnnnw: '4',\r\n  wnnwwnnnn: '5',\r\n  nnwwwnnnn: '6',\r\n  nnnwnnwnw: '7',\r\n  wnnwnnwnn: '8',\r\n  nnwwnnwnn: '9',\r\n  wnnnnwnnw: 'A',\r\n  nnwnnwnnw: 'B',\r\n  wnwnnwnnn: 'C',\r\n  nnnnwwnnw: 'D',\r\n  wnnnwwnnn: 'E',\r\n  nnwnwwnnn: 'F',\r\n  nnnnnwwnw: 'G',\r\n  wnnnnwwnn: 'H',\r\n  nnwnnwwnn: 'I',\r\n  nnnnwwwnn: 'J',\r\n  wnnnnnnww: 'K',\r\n  nnwnnnnww: 'L',\r\n  wnwnnnnwn: 'M',\r\n  nnnnwnnww: 'N',\r\n  wnnnwnnwn: 'O',\r\n  nnwnwnnwn: 'P',\r\n  nnnnnnwww: 'Q',\r\n  wnnnnnwwn: 'R',\r\n  nnwnnnwwn: 'S',\r\n  nnnnwnwwn: 'T',\r\n  wwnnnnnnw: 'U',\r\n  nwwnnnnnw: 'V',\r\n  wwwnnnnnn: 'W',\r\n  nwnnwnnnw: 'X',\r\n  wwnnwnnnn: 'Y',\r\n  nwwnwnnnn: 'Z',\r\n  nwnnnnwnw: '-',\r\n  wwnnnnwnn: '.',\r\n  nwwnnnwnn: ' ',\r\n  nwnwnwnnn: '$',\r\n  nwnwnnnwn: '/',\r\n  nwnnnwnwn: '+',\r\n  nnnwnwnwn: '%',\r\n  nwnnwnwnn: '*',\r\n}\r\n\r\nmodule.exports = lines => {\r\n  let code = []\r\n\r\n  const barThreshold = Math.ceil(\r\n    lines.reduce((pre, item) => pre + item, 0) / lines.length\r\n  )\r\n\r\n  // Read one encoded character at a time.\r\n  while (lines.length > 0) {\r\n    const sequenceBar = lines\r\n      .splice(0, 10)\r\n      .map(line => (line > barThreshold ? 'w' : 'n'))\r\n\r\n    code.push(CHAR_SET[sequenceBar.slice(0, 9).join('')])\r\n  }\r\n\r\n  if (code.pop() !== '*' || code.shift() !== '*') return null\r\n\r\n  return code.join('')\r\n}\r\n","const CHAR_SET = [\r\n  { '100010100': '0' },\r\n  { '101001000': '1' },\r\n  { '101000100': '2' },\r\n  { '101000010': '3' },\r\n  { '100101000': '4' },\r\n  { '100100100': '5' },\r\n  { '100100010': '6' },\r\n  { '101010000': '7' },\r\n  { '100010010': '8' },\r\n  { '100001010': '9' },\r\n  { '110101000': 'A' },\r\n  { '110100100': 'B' },\r\n  { '110100010': 'C' },\r\n  { '110010100': 'D' },\r\n  { '110010010': 'E' },\r\n  { '110001010': 'F' },\r\n  { '101101000': 'G' },\r\n  { '101100100': 'H' },\r\n  { '101100010': 'I' },\r\n  { '100110100': 'J' },\r\n  { '100011010': 'K' },\r\n  { '101011000': 'L' },\r\n  { '101001100': 'M' },\r\n  { '101000110': 'N' },\r\n  { '100101100': 'O' },\r\n  { '100010110': 'P' },\r\n  { '110110100': 'Q' },\r\n  { '110110010': 'R' },\r\n  { '110101100': 'S' },\r\n  { '110100110': 'T' },\r\n  { '110010110': 'U' },\r\n  { '110011010': 'V' },\r\n  { '101101100': 'W' },\r\n  { '101100110': 'X' },\r\n  { '100110110': 'Y' },\r\n  { '100111010': 'Z' },\r\n  { '100101110': '-' },\r\n  { '111010100': '.' },\r\n  { '111010010': ' ' },\r\n  { '111001010': '$' },\r\n  { '101101110': '/' },\r\n  { '101110110': '+' },\r\n  { '110101110': '%' },\r\n  { '100100110': '($)' },\r\n  { '111011010': '(%)' },\r\n  { '111010110': '(/)' },\r\n  { '100110010': '(+)' },\r\n  { '101011110': '*' },\r\n]\r\n\r\nmodule.exports = lines => {\r\n  let code = []\r\n  const binary = []\r\n\r\n  // remove termination bar\r\n  lines.pop()\r\n\r\n  const barThreshold = Math.ceil(\r\n    lines.reduce((pre, item) => pre + item, 0) / lines.length\r\n  )\r\n\r\n  const minBarWidth = Math.ceil(\r\n    lines.reduce((pre, item) => {\r\n      if (item < barThreshold) return (pre + item) / 2\r\n      return pre\r\n    }, 0)\r\n  )\r\n\r\n  // leave the padded *\r\n  for (let i = 0; i < lines.length; i += 1) {\r\n    let segment = lines[i]\r\n\r\n    while (segment > 0) {\r\n      if (i % 2 === 0) {\r\n        binary.push(1)\r\n      } else {\r\n        binary.push(0)\r\n      }\r\n      segment -= minBarWidth\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < binary.length; i += 9) {\r\n    const searcKey = binary.slice(i, i + 9).join('')\r\n    code.push(\r\n      CHAR_SET.filter(item => Object.keys(item)[0] === searcKey)[0][searcKey]\r\n    )\r\n  }\r\n\r\n  if (code.shift() !== '*' || code.pop() !== '*') return null\r\n\r\n  const K = code.pop()\r\n  let sum = 0\r\n  let letter,\r\n    Value,\r\n    findValue = item => Object.values(item)[0] === letter\r\n\r\n  for (let i = code.length - 1; i >= 0; i -= 1) {\r\n    letter = code[i]\r\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0])\r\n    sum += Value * (1 + ((code.length - (i + 1)) % 20))\r\n  }\r\n  if (Object.values(CHAR_SET[sum % 47])[0] !== K) return null\r\n\r\n  const C = code.pop()\r\n  sum = 0\r\n\r\n  for (let i = code.length - 1; i >= 0; i -= 1) {\r\n    letter = code[i]\r\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0])\r\n    sum += Value * (1 + ((code.length - (i + 1)) % 20))\r\n  }\r\n  if (Object.values(CHAR_SET[sum % 47])[0] !== C) return null\r\n\r\n  return code.join('')\r\n}\r\n","const CHAR_SET = [\r\n  'nnwwn',\r\n  'wnnnw',\r\n  'nwnnw',\r\n  'wwnnn',\r\n  'nnwnw',\r\n  'wnwnn',\r\n  'nwwnn',\r\n  'nnnww',\r\n  'wnnwn',\r\n  'nwnwn',\r\n]\r\n\r\nmodule.exports = (lines, type = 'interleaved') => {\r\n  let code = []\r\n  const sequenceBar = []\r\n\r\n  const barThreshold = Math.ceil(\r\n    lines.reduce((pre, item) => pre + item, 0) / lines.length\r\n  )\r\n\r\n  // extract start/ends pair\r\n  const startChar = lines\r\n    .splice(0, 6)\r\n    .filter((item, index) => index % 2 === 0)\r\n    .map(line => (line > barThreshold ? 'w' : 'n'))\r\n    .join('')\r\n\r\n  const endChar = lines\r\n    .splice(lines.length - 5, 5)\r\n    .filter((item, index) => index % 2 === 0)\r\n    .map(line => (line > barThreshold ? 'w' : 'n'))\r\n    .join('')\r\n\r\n  if (startChar !== 'wwn' || endChar !== 'wnw') return null\r\n\r\n  // TODO: implement interleaved\r\n  // Read one encoded character at a time.\r\n  while (lines.length > 0) {\r\n    lines\r\n      .splice(0, 10)\r\n      .filter((item, index) => index % 2 === 0)\r\n      .map(line => sequenceBar.push(line > barThreshold ? 'w' : 'n'))\r\n  }\r\n\r\n  // Convert bars pattern to integers.\r\n  while (sequenceBar.length > 0) {\r\n    code.push(CHAR_SET.indexOf(sequenceBar.splice(0, 5).join('')))\r\n  }\r\n\r\n  return code.join('')\r\n}\r\n","const DecoderEAN13 = require('./ean-13')\r\nconst DecoderEAN8 = require('./ean-8')\r\nconst DecoderCode39 = require('./code-39')\r\nconst DecoderCode93 = require('./code-93')\r\nconst DecoderCode2of5 = require('./2of5')\r\n\r\nconst BARCODE_DECODERS = {\r\n  'code-93': DecoderCode93,\r\n  'code-39': DecoderCode39,\r\n  'ean-13': DecoderEAN13,\r\n  'ean-8': DecoderEAN8,\r\n  'code-2of5': DecoderCode2of5,\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} image Image element || Canvas || ImageData\r\n * @param {Object} options\r\n */\r\nconst barcodeDecoder = (imageSource, options) => {\r\n  let imageDataInput\r\n\r\n  if (typeof imageSource === 'string')\r\n    imageSource = document.getElementById(imageSource)\r\n\r\n  let elementType = imageSource.tagName\r\n  if (elementType === 'IMG') {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = imageSource.naturalWidth\r\n    canvas.height = imageSource.naturalHeight\r\n    const ctx = canvas.getContext('2d')\r\n\r\n    ctx.drawImage(imageSource, 0, 0)\r\n\r\n    imageDataInput = ctx.getImageData(\r\n      0,\r\n      0,\r\n      imageSource.naturalWidth,\r\n      imageSource.naturalHeight\r\n    )\r\n  } else if (elementType === 'CANVAS') {\r\n    imageDataInput = imageSource\r\n      .getContext('2d')\r\n      .getImageData(0, 0, imageSource.naturalWidth, imageSource.naturalHeight)\r\n  } else if (imageSource.data) {\r\n    imageDataInput = imageSource\r\n  } else {\r\n    throw new Error('Invalid image source specified!')\r\n  }\r\n\r\n  const { data, width, height } = imageDataInput\r\n  imageSource = null\r\n  imageDataInput = null\r\n\r\n  // start debug code\r\n  /*\r\n  const canvasTemp = document.createElement('canvas')\r\n  const ctxTemp = canvasTemp.getContext('2d')\r\n  canvasTemp.style.border = '2px solid red'\r\n  canvasTemp.width = width\r\n  canvasTemp.height = height\r\n\r\n  let imgData = ctxTemp.createImageData(width, height)\r\n  for (let i = 0; i < imgData.data.length; i += 1) {\r\n    imgData.data[i] = data[i]\r\n  }\r\n  ctxTemp.putImageData(imgData, 0, 0)\r\n  document.body.appendChild(canvasTemp)\r\n  */\r\n  // end debug code\r\n\r\n  // check points for barcode location\r\n  const spoints = [1, 9, 2, 8, 3, 7, 4, 6, 5]\r\n  let numLines = spoints.length\r\n  const slineStep = height / (numLines + 1)\r\n\r\n  // eslint-disable-next-line\r\n  while ((numLines -= 1)) {\r\n    // create section of height 2\r\n    const start = 4 * width * Math.floor(slineStep * spoints[numLines])\r\n    const end =\r\n      4 * width * Math.floor(slineStep * spoints[numLines]) + 2 * 4 * width\r\n    const pxLine = data.slice(start, end)\r\n    const sum = []\r\n    let min = 0\r\n    let max = 0\r\n\r\n    // grey scale section and sum of columns pixels in section\r\n    for (let row = 0; row < 2; row += 1) {\r\n      for (let col = 0; col < width; col += 1) {\r\n        const i = (row * width + col) * 4\r\n        const g = (pxLine[i] * 3 + pxLine[i + 1] * 4 + pxLine[i + 2] * 2) / 9\r\n        const s = sum[col]\r\n\r\n        pxLine[i] = g\r\n        pxLine[i + 1] = g\r\n        pxLine[i + 2] = g\r\n\r\n        sum[col] = g + (s === undefined ? 0 : s)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < width; i += 1) {\r\n      sum[i] /= 2\r\n      const s = sum[i]\r\n\r\n      if (s < min) {\r\n        min = s\r\n      }\r\n      if (s > max) {\r\n        max = s\r\n      }\r\n    }\r\n\r\n    // matches columns in two rows\r\n    const pivot = min + (max - min) / 2\r\n    const bmp = []\r\n\r\n    for (let col = 0; col < width; col += 1) {\r\n      let matches = 0\r\n      for (let row = 0; row < 2; row += 1) {\r\n        if (pxLine[(row * width + col) * 4] > pivot) {\r\n          matches += 1\r\n        }\r\n      }\r\n      bmp.push(matches > 1)\r\n    }\r\n\r\n    // matches width of barcode lines\r\n    let curr = bmp[0]\r\n    let count = 1\r\n    const lines = []\r\n\r\n    for (let col = 0; col < width; col += 1) {\r\n      if (bmp[col] === curr) {\r\n        count += 1\r\n        if (col === width - 1) {\r\n          lines.push(count)\r\n        }\r\n      } else {\r\n        lines.push(count)\r\n        count = 1\r\n        curr = bmp[col]\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    if (lines.length <= 1) continue\r\n\r\n    // remove empty whitespaces on side of barcode\r\n    lines.shift()\r\n    lines.pop()\r\n\r\n    // Run the decoder\r\n    const result = BARCODE_DECODERS[options.barcode](lines, options.type)\r\n\r\n    if (result) {\r\n      return result\r\n    }\r\n\r\n    // only one iteration when dev mode\r\n    if (process.env.NODE_ENV === 'development') {\r\n      numLines = 1\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nif (module && module.exports) {\r\n  module.exports = barcodeDecoder\r\n} else if (window) {\r\n  window.javascriptBarcodeReader = barcodeDecoder\r\n}\r\n","import barcodeDecoder from '../src'\r\n\r\nconst buttons = document.getElementsByTagName('button')\r\n\r\nfor (let i = 0; i < buttons.length; i += 1) {\r\n  const button = buttons[i]\r\n  const type = button.getAttribute('data-type')\r\n  const subType = button.getAttribute('data-sub-type')\r\n  const img = document.getElementById(`img-${type}`)\r\n\r\n  button.onclick = () => {\r\n    // eslint-disable-next-line\r\n    alert(barcodeDecoder(img, { barcode: type, type: subType }))\r\n  }\r\n}\r\n"]}