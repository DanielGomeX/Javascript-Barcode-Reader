{"version":3,"sources":["..\\src\\code-93\\index.js","..\\src\\code-39\\index.js","..\\src\\ean-13\\index.js","..\\src\\Index.js"],"names":["BAR_SET","GROUP_SET","CHAR_SET","decode","push","code","i","segment","lines","slice","barThreshold","Math","round","reduce","pre","item","length","noob","map","barSeg","filter","index","join","whiteSeg","parseInt","substring","module","exports","UPC_SET","bar","group","digits","reverse","indexOf","DecoderCode93","require","DecoderCode39","DecoderEAN13","BARCODE_DECODERS","barcodeDecoder","imageSource","options","ImageData","document","getElementById","elementType","tagName","canvas","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","getImageData","data","Error","numLines","spoints","slineStep","start","floor","end","pxLine","sum","min","max","row","col","g","s","undefined","pivot","bmp","matches","curr","count","barcode"],"mappings":"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","file":"Index.84447ba5.map","sourceRoot":"..\\docs-src","sourcesContent":["const BAR_SET = {\r\n  '10001': '1',\r\n  '01001': '2',\r\n  '11000': '3',\r\n  '00101': '4',\r\n  '10100': '5',\r\n  '01100': '6',\r\n  '00011': '7',\r\n  '10010': '8',\r\n  '01010': '9',\r\n  '00110': '10',\r\n}\r\n\r\nconst GROUP_SET = {\r\n  '01000': '0',\r\n  '00100': '10',\r\n  '00010': '20',\r\n  '10000': '30',\r\n}\r\n\r\nconst CHAR_SET = [\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  '0',\r\n  'A',\r\n  'B',\r\n  'C',\r\n  'D',\r\n  'E',\r\n  'F',\r\n  'G',\r\n  'H',\r\n  'I',\r\n  'J',\r\n  'K',\r\n  'L',\r\n  'M',\r\n  'N',\r\n  'O',\r\n  'P',\r\n  'Q',\r\n  'R',\r\n  'S',\r\n  'T',\r\n  'U',\r\n  'V',\r\n  'W',\r\n  'X',\r\n  'Y',\r\n  'Z',\r\n  '-',\r\n  '.',\r\n  '␣',\r\n  '*',\r\n]\r\n\r\nconst decode = lines => {\r\n  // manualy push last white space\r\n  lines.push(3)\r\n  let code = ''\r\n\r\n  for (let i = 1; i < lines.length; i += 10) {\r\n    const segment = lines.slice(i, i + 10)\r\n\r\n    const barThreshold = Math.round(\r\n      segment.reduce((pre, item) => pre + item, 0) / segment.length\r\n    )\r\n\r\n    const noob = segment.map(item => (item > barThreshold ? 1 : 0))\r\n    const barSeg = noob.filter((item, index) => index % 2 === 0).join('')\r\n    const whiteSeg = noob.filter((item, index) => index % 2 !== 0).join('')\r\n\r\n    code +=\r\n      CHAR_SET[\r\n        parseInt(BAR_SET[barSeg], 10) - 1 + parseInt(GROUP_SET[whiteSeg], 10)\r\n      ]\r\n  }\r\n\r\n  return code.substring(1, code.length - 1)\r\n}\r\n\r\nmodule.exports = {\r\n  decode,\r\n}\r\n","const BAR_SET = {\r\n  '10001': '1',\r\n  '01001': '2',\r\n  '11000': '3',\r\n  '00101': '4',\r\n  '10100': '5',\r\n  '01100': '6',\r\n  '00011': '7',\r\n  '10010': '8',\r\n  '01010': '9',\r\n  '00110': '10',\r\n}\r\n\r\nconst GROUP_SET = {\r\n  '01000': '0',\r\n  '00100': '10',\r\n  '00010': '20',\r\n  '10000': '30',\r\n}\r\n\r\nconst CHAR_SET = [\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  '0',\r\n  'A',\r\n  'B',\r\n  'C',\r\n  'D',\r\n  'E',\r\n  'F',\r\n  'G',\r\n  'H',\r\n  'I',\r\n  'J',\r\n  'K',\r\n  'L',\r\n  'M',\r\n  'N',\r\n  'O',\r\n  'P',\r\n  'Q',\r\n  'R',\r\n  'S',\r\n  'T',\r\n  'U',\r\n  'V',\r\n  'W',\r\n  'X',\r\n  'Y',\r\n  'Z',\r\n  '-',\r\n  '.',\r\n  '␣',\r\n  '*',\r\n]\r\n\r\nconst decode = lines => {\r\n  // manualy push last white space\r\n  lines.push(0)\r\n  let code = ''\r\n\r\n  for (let i = 1; i < lines.length; i += 10) {\r\n    const segment = lines.slice(i, i + 10)\r\n\r\n    const barThreshold = Math.round(\r\n      segment.reduce((pre, item) => pre + item, 0) / segment.length\r\n    )\r\n\r\n    const noob = segment.map(item => (item > barThreshold ? 1 : 0))\r\n    const barSeg = noob.filter((item, index) => index % 2 === 0).join('')\r\n    const whiteSeg = noob.filter((item, index) => index % 2 !== 0).join('')\r\n\r\n    code +=\r\n      CHAR_SET[\r\n        parseInt(BAR_SET[barSeg], 10) - 1 + parseInt(GROUP_SET[whiteSeg], 10)\r\n      ]\r\n  }\r\n\r\n  return code.substring(1, code.length - 1)\r\n}\r\n\r\nmodule.exports = {\r\n  decode,\r\n}\r\n","const UPC_SET = {\r\n  '3211': '0',\r\n  '2221': '1',\r\n  '2122': '2',\r\n  '1411': '3',\r\n  '1132': '4',\r\n  '1231': '5',\r\n  '1114': '6',\r\n  '1312': '7',\r\n  '1213': '8',\r\n  '3112': '9',\r\n}\r\n\r\nconst decode = lines => {\r\n  let code = ''\r\n  // start indicator/reference lines\r\n  const bar = ~~((lines[1] + lines[2] + lines[3]) / 3) //eslint-disable-line\r\n\r\n  for (let i = 1; i < lines.length; i += 1) {\r\n    let group\r\n\r\n    if (code.length < 6) {\r\n      group = lines.slice(i * 4, i * 4 + 4)\r\n    } else {\r\n      group = lines.slice(i * 4 + 5, i * 4 + 9)\r\n    }\r\n\r\n    const digits = [\r\n      Math.round(group[0] / bar),\r\n      Math.round(group[1] / bar),\r\n      Math.round(group[2] / bar),\r\n      Math.round(group[3] / bar),\r\n    ]\r\n\r\n    code +=\r\n      UPC_SET[digits.join('')] || UPC_SET[digits.reverse().join('')] || 'X'\r\n\r\n    if (code.length === 12) {\r\n      return code\r\n      // eslint-disable-next-line\r\n      break\r\n    }\r\n  }\r\n  if (code.indexOf('X') === -1) {\r\n    return code || false\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nmodule.exports = {\r\n  decode,\r\n}\r\n","const DecoderCode93 = require('./code-93')\r\nconst DecoderCode39 = require('./code-39')\r\nconst DecoderEAN13 = require('./ean-13')\r\n\r\nconst BARCODE_DECODERS = {\r\n  'code-93': DecoderCode93,\r\n  'code-39': DecoderCode39,\r\n  'ean-13': DecoderEAN13,\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} image Image element || Canvas || ImageData\r\n * @param {Object} options\r\n */\r\nconst barcodeDecoder = (imageSource, options) => {\r\n  let ImageData\r\n\r\n  if (typeof imageSource === 'string')\r\n    imageSource = document.getElementById(imageSource)\r\n\r\n  let elementType = imageSource.tagName\r\n  if (elementType === 'IMG') {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = imageSource.naturalWidth\r\n    canvas.height = imageSource.naturalHeight\r\n    const ctx = canvas.getContext('2d')\r\n\r\n    ctx.drawImage(imageSource, 0, 0)\r\n\r\n    ImageData = ctx.getImageData(\r\n      0,\r\n      0,\r\n      imageSource.naturalWidth,\r\n      imageSource.naturalHeight\r\n    )\r\n  } else if (elementType === 'CANVAS') {\r\n    ImageData = imageSource\r\n      .getContext('2d')\r\n      .getImageData(0, 0, imageSource.naturalWidth, imageSource.naturalHeight)\r\n  } else if (imageSource.data) {\r\n    ImageData = imageSource\r\n  } else {\r\n    throw new Error('Invalid image source specified!')\r\n  }\r\n\r\n  const { data, width, height } = ImageData\r\n  imageSource = null\r\n  ImageData = null\r\n\r\n  // check points for barcode location\r\n  const spoints = [1, 9, 2, 8, 3, 7, 4, 6, 5]\r\n  let numLines = spoints.length\r\n  const slineStep = height / (numLines + 1)\r\n\r\n  // eslint-disable-next-line\r\n  while ((numLines -= 1)) {\r\n    // create section of height 2\r\n    const start = 4 * width * Math.floor(slineStep * spoints[numLines])\r\n    const end =\r\n      4 * width * Math.floor(slineStep * spoints[numLines]) + 2 * 4 * width\r\n    const pxLine = data.slice(start, end)\r\n    const sum = []\r\n    let min = 0\r\n    let max = 0\r\n\r\n    // grey scale section and sum of columns pixels in section\r\n    for (let row = 0; row < 2; row += 1) {\r\n      for (let col = 0; col < width; col += 1) {\r\n        const i = (row * width + col) * 4\r\n        const g = (pxLine[i] * 3 + pxLine[i + 1] * 4 + pxLine[i + 2] * 2) / 9\r\n        const s = sum[col]\r\n\r\n        pxLine[i] = g\r\n        pxLine[i + 1] = g\r\n        pxLine[i + 2] = g\r\n\r\n        sum[col] = g + (s === undefined ? 0 : s)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < width; i += 1) {\r\n      sum[i] /= 2\r\n      const s = sum[i]\r\n\r\n      if (s < min) {\r\n        min = s\r\n      }\r\n      if (s > max) {\r\n        max = s\r\n      }\r\n    }\r\n\r\n    // matches columns in two rows\r\n    const pivot = min + (max - min) / 2\r\n    const bmp = []\r\n\r\n    for (let col = 0; col < width; col += 1) {\r\n      let matches = 0\r\n      for (let row = 0; row < 2; row += 1) {\r\n        if (pxLine[(row * width + col) * 4] > pivot) {\r\n          matches += 1\r\n        }\r\n      }\r\n      bmp.push(matches > 1)\r\n    }\r\n\r\n    // matches width of barcode lines\r\n    let curr = bmp[0]\r\n    let count = 1\r\n    const lines = []\r\n\r\n    for (let col = 0; col < width; col += 1) {\r\n      if (bmp[col] === curr) {\r\n        count += 1\r\n      } else {\r\n        lines.push(count)\r\n        count = 1\r\n        curr = bmp[col]\r\n      }\r\n    }\r\n\r\n    // TODO:  If not found in first step, continue searching until while loop\r\n\r\n    // Run the decoder\r\n    return BARCODE_DECODERS[options.barcode].decode(lines)\r\n  }\r\n  return null\r\n}\r\n\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = barcodeDecoder\r\n    module.exports = barcodeDecoder\r\n  }\r\n  exports.barcodeDecoder = barcodeDecoder\r\n} else {\r\n  root.barcodeDecoder = barcodeDecoder\r\n}\r\n"]}